<base href="<%= BASE_URL %>/" />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Ubuntu:300,400,400i,700&display=fallback"
/>
<link
  rel="stylesheet"
  href="<%= BASE_URL %>/plugins/fontawesome-free/css/all.min.css"
/>
<link rel="stylesheet" href="<%= BASE_URL %>/dist/css/adminlte.min.css" />
<link rel="stylesheet" href="<%= BASE_URL %>/css/custom.css" />
<link
  rel="stylesheet"
  href="<%= BASE_URL %>/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"
/>
<link
  rel="stylesheet"
  href="<%= BASE_URL %>/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"
/>
<link
  rel="stylesheet"
  href="<%= BASE_URL %>/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"
/>
<link
  rel="stylesheet"
  href="<%= BASE_URL %>/plugins\sweetalert2\sweetalert2.min.css"
/>
<script src="<%= BASE_URL %>/plugins/jquery/jquery.min.js"></script>

<script src="<%= BASE_URL %>/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="<%= BASE_URL %>/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
<script src="<%= BASE_URL %>/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="<%= BASE_URL %>/plugins/sweetalert2/sweetalert2.min.js"></script>
<script src="<%= BASE_URL %>/dist/js/adminlte.min.js"></script>


<script>
  const formatDate = function (dateString) {
    const formatType = "<%= dateFormat; %>";
    const date = new Date(dateString);

    if (isNaN(date.getTime())) {
      throw new Error("Invalid date string");
    }

    const padZero = (num) => num.toString().padStart(2, "0");

    const day = padZero(date.getDate());
    const month = padZero(date.getMonth() + 1); // Months are zero-indexed
    const year = date.getFullYear();

    switch (formatType) {
      case "MM/DD/YYYY":
        return `${month}/${day}/${year}`;
      case "DD/MM/YYYY":
        return `${day}/${month}/${year}`;
      case "YYYY/MM/DD":
        return `${year}/${month}/${day}`;
      case "DD-MM-YYYY":
        return `${day}-${month}-${year}`;
      case "YYYY-MM-DD":
        return `${year}-${month}-${day}`;
      case "MM-DD-YYYY":
        return `${month}-${day}-${year}`;
      default:
        throw new Error("Unsupported format type");
    }
  }


  function formatNumberFn(value, format) {
    if (typeof value !== "number") {
      throw new Error("First argument must be a number.");
    }

    let options;

    switch (format) {
      case "US":
        options = { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 };
        return new Intl.NumberFormat("en-US", options).format(value);

      case "EU":
        options = { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 };
        return new Intl.NumberFormat("de-DE", options).format(value);

      case "SPACE":
        // Manually format with space as thousand separator and period as decimal
        const parts = value.toFixed(2).split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, " ");
        return parts.join(".");

      default:
        throw new Error("Unsupported format type.");
    }
  }

  
</script>

<%
  formatDate = function (dateString) {
    const formatType = dateFormat;
    const date = new Date(dateString);

    if (isNaN(date.getTime())) {
      throw new Error("Invalid date string");
    }

    const padZero = (num) => num.toString().padStart(2, "0");

    const day = padZero(date.getDate());
    const month = padZero(date.getMonth() + 1); // Months are zero-indexed
    const year = date.getFullYear();

    switch (formatType) {
      case "MM/DD/YYYY":
        return `${month}/${day}/${year}`;
      case "DD/MM/YYYY":
        return `${day}/${month}/${year}`;
      case "YYYY/MM/DD":
        return `${year}/${month}/${day}`;
      case "DD-MM-YYYY":
        return `${day}-${month}-${year}`;
      case "YYYY-MM-DD":
        return `${year}-${month}-${day}`;
      case "MM-DD-YYYY":
        return `${month}-${day}-${year}`;
      default:
        throw new Error("Unsupported format type");
    }
  }

  formatNumberFn = function (value, format) {
    if (typeof value !== "number") {
      throw new Error("First argument must be a number.");
    }

    let options;

    switch (format) {
      case "US":
        options = { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 };
        return new Intl.NumberFormat("en-US", options).format(value);

      case "EU":
        options = { style: "decimal", minimumFractionDigits: 2, maximumFractionDigits: 2 };
        return new Intl.NumberFormat("de-DE", options).format(value);

      case "SPACE":
        // Manually format with space as thousand separator and period as decimal
        const parts = value.toFixed(2).split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, " ");
        return parts.join(".");

      default:
        throw new Error("Unsupported format type.");
    }
  }

%>